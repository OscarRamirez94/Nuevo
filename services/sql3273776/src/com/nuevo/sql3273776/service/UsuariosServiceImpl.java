/*Copyright (c) 2019-2020 reddcoin2.com All Rights Reserved.
 This software is the confidential and proprietary information of reddcoin2.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with reddcoin2.com*/
package com.nuevo.sql3273776.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.nuevo.sql3273776.Usuarios;


/**
 * ServiceImpl object for domain model class Usuarios.
 *
 * @see Usuarios
 */
@Service("sql3273776.UsuariosService")
@Validated
public class UsuariosServiceImpl implements UsuariosService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsuariosServiceImpl.class);


    @Autowired
    @Qualifier("sql3273776.UsuariosDao")
    private WMGenericDao<Usuarios, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Usuarios, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sql3273776TransactionManager")
    @Override
    public Usuarios create(Usuarios usuarios) {
        LOGGER.debug("Creating a new Usuarios with information: {}", usuarios);

        Usuarios usuariosCreated = this.wmGenericDao.create(usuarios);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(usuariosCreated);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public Usuarios getById(Integer usuariosId) {
        LOGGER.debug("Finding Usuarios by id: {}", usuariosId);
        return this.wmGenericDao.findById(usuariosId);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public Usuarios findById(Integer usuariosId) {
        LOGGER.debug("Finding Usuarios by id: {}", usuariosId);
        try {
            return this.wmGenericDao.findById(usuariosId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Usuarios found with id: {}", usuariosId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public List<Usuarios> findByMultipleIds(List<Integer> usuariosIds, boolean orderedReturn) {
        LOGGER.debug("Finding Usuarios by ids: {}", usuariosIds);

        return this.wmGenericDao.findByMultipleIds(usuariosIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sql3273776TransactionManager")
    @Override
    public Usuarios update(Usuarios usuarios) {
        LOGGER.debug("Updating Usuarios with information: {}", usuarios);

        this.wmGenericDao.update(usuarios);
        this.wmGenericDao.refresh(usuarios);

        return usuarios;
    }

    @Transactional(value = "sql3273776TransactionManager")
    @Override
    public Usuarios delete(Integer usuariosId) {
        LOGGER.debug("Deleting Usuarios with id: {}", usuariosId);
        Usuarios deleted = this.wmGenericDao.findById(usuariosId);
        if (deleted == null) {
            LOGGER.debug("No Usuarios found with id: {}", usuariosId);
            throw new EntityNotFoundException(String.valueOf(usuariosId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sql3273776TransactionManager")
    @Override
    public void delete(Usuarios usuarios) {
        LOGGER.debug("Deleting Usuarios with {}", usuarios);
        this.wmGenericDao.delete(usuarios);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public Page<Usuarios> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Usuarios");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public Page<Usuarios> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Usuarios");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sql3273776 for table Usuarios to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sql3273776 for table Usuarios to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sql3273776TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}